// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_videos.sql

package db

import (
	"context"
)

const createUserVideo = `-- name: CreateUserVideo :execlastid
insert into user_videos (user_id, video_id)
values (?, ?)
`

type CreateUserVideoParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) CreateUserVideo(ctx context.Context, arg CreateUserVideoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUserVideo, arg.UserID, arg.VideoID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteFavoriteByUserId = `-- name: DeleteFavoriteByUserId :exec
delete
from user_videos
where user_id = ?
`

func (q *Queries) DeleteFavoriteByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFavoriteByUserId, userID)
	return err
}

const deleteUserVideo = `-- name: DeleteUserVideo :exec
delete
from user_videos
where user_id = ?
  and video_id = ?
`

type DeleteUserVideoParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) DeleteUserVideo(ctx context.Context, arg DeleteUserVideoParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserVideo, arg.UserID, arg.VideoID)
	return err
}

const getUserVideo = `-- name: GetUserVideo :one
select id, user_id, video_id
from user_videos
where user_id = ?
  and video_id = ?
`

type GetUserVideoParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) GetUserVideo(ctx context.Context, arg GetUserVideoParams) (UserVideo, error) {
	row := q.db.QueryRowContext(ctx, getUserVideo, arg.UserID, arg.VideoID)
	var i UserVideo
	err := row.Scan(&i.ID, &i.UserID, &i.VideoID)
	return i, err
}

const getVideoByUserId = `-- name: GetVideoByUserId :many
select id, user_id, video_id
from user_videos
where user_id = ?
`

func (q *Queries) GetVideoByUserId(ctx context.Context, userID int64) ([]UserVideo, error) {
	rows, err := q.db.QueryContext(ctx, getVideoByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserVideo{}
	for rows.Next() {
		var i UserVideo
		if err := rows.Scan(&i.ID, &i.UserID, &i.VideoID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosFavorite = `-- name: GetVideosFavorite :many
select videos.id, videos.play_url, videos.cover_url,videos.favorite_count,videos.comment_count,videos.title, user.id as user_id, name, follow_count, follower_count
from videos,
     user
where videos.id = ?
  and videos.user_id = user.id
`

type GetVideosFavoriteRow struct {
	ID            int64  `json:"id"`
	PlayUrl       string `json:"play_url"`
	CoverUrl      string `json:"cover_url"`
	FavoriteCount int64  `json:"favorite_count"`
	CommentCount  int64  `json:"comment_count"`
	Title         string `json:"title"`
	UserID        int64  `json:"user_id"`
	Name          string `json:"name"`
	FollowCount   int64  `json:"follow_count"`
	FollowerCount int64  `json:"follower_count"`
}

func (q *Queries) GetVideosFavorite(ctx context.Context, id int64) ([]GetVideosFavoriteRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideosFavorite, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVideosFavoriteRow{}
	for rows.Next() {
		var i GetVideosFavoriteRow
		if err := rows.Scan(
			&i.ID,
			&i.PlayUrl,
			&i.CoverUrl,
			&i.FavoriteCount,
			&i.CommentCount,
			&i.Title,
			&i.UserID,
			&i.Name,
			&i.FollowCount,
			&i.FollowerCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
